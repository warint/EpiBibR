geom_line(aes(fill = variable, colour=variable), size= 1, show.legend = FALSE)+
facet_wrap(~ variable, ncol = 2) +
theme(legend.position = "none")+
scale_color_uchicago()+
scale_fill_uchicago()+
theme_hc()
ddd<- ggplot(p4, aes(Year, value, fill = variable, colour=variable)) +
geom_point(aes(fill = variable, colour=variable), size =1,show.legend = FALSE) +
geom_line(aes(fill = variable, colour=variable), size= 1, show.legend = FALSE)+
facet_wrap(~ variable, ncol = 2) +
theme(legend.position = "none")+
scale_color_uchicago()+
scale_fill_uchicago()+
theme_hc()
library(cowplot)
cc <-plot_grid(aaa, bbb,ccc, ddd,  label_size = 5)
plot_grid(aaa, bbb,ccc, ddd,  label_size = 5)
aaa<-ggplot(p1, aes(Year, value, fill = variable, colour=variable)) +
geom_point(aes(fill = variable, colour=variable), size =1,show.legend = FALSE) +
geom_line(aes(fill = variable, colour=variable), size= 1, show.legend = FALSE)+
theme(legend.position = "none")+
scale_color_uchicago()+
scale_fill_uchicago()+
theme_hc()
ggplot(p1, aes(Year, value, fill = variable, colour=variable)) +
geom_point(aes(fill = variable, colour=variable), size =1,show.legend = FALSE) +
geom_line(aes(fill = variable, colour=variable), size= 1, show.legend = FALSE)+
theme(legend.position = "none")+
scale_color_uchicago()+
scale_fill_uchicago()+
theme_hc()
aaa<-ggplot(Immunology, aes(Year, value, fill = variable, colour=variable)) +
geom_point(aes(fill = variable, colour=variable), size =1,show.legend = FALSE) +
geom_line(aes(fill = variable, colour=variable), size= 1, show.legend = FALSE)+
theme(legend.position = "none")+
#scale_color_uchicago()+
#scale_fill_uchicago()+
theme_hc()
bbb <-ggplot(Genetics, aes(Year, value, fill = variable, colour=variable)) +
geom_point(aes(fill = variable, colour=variable), size =1,show.legend = FALSE) +
geom_line(aes(fill = variable, colour=variable), size= 1, show.legend = FALSE)+
facet_wrap(~ variable, ncol = 2) +
theme(legend.position = "none")+
#scale_color_uchicago()+
#scale_fill_uchicago()+
theme_hc()
aaa
bbb
plot_grid(aaa, bbb,  label_size = 5)
cc + scale_fill_uchicago()
cc <-plot_grid(aaa, bbb,  label_size = 5)
cc + scale_fill_uchicago()
ggplot(p3, aes(Year, value, fill = variable, colour=variable)) +
geom_point(aes(fill = variable, colour=variable), size =1,show.legend = FALSE) +
geom_line(aes(fill = variable, colour=variable), size= 1, show.legend = FALSE)+
facet_wrap(~ variable, ncol = 2) +
theme(legend.position = "none")+
scale_color_lancet()+
scale_fill_lancet()
theme_hc()
ggplot(p4, aes(Year, value, fill = variable, colour=variable)) +
geom_point(aes(fill = variable, colour=variable), size =1,show.legend = FALSE) +
geom_line(aes(fill = variable, colour=variable), size= 1, show.legend = FALSE)+
facet_wrap(~ variable, ncol = 2) +
theme(legend.position = "none")+
scale_color_uchicago(a)+
scale_fill_uchicago()+
theme_hc()
ggplot(p4, aes(Year, value, fill = variable, colour=variable)) +
geom_point(aes(fill = variable, colour=variable), size =1,show.legend = FALSE) +
geom_line(aes(fill = variable, colour=variable), size= 1, show.legend = FALSE)+
facet_wrap(~ variable, ncol = 2) +
theme(legend.position = "none")+
scale_color_uchicago(a)+
scale_fill_uchicago()+
theme_hc()
ggplot(p4, aes(Year, value, fill = variable, colour=variable)) +
geom_point(aes(fill = variable, colour=variable), size =1,show.legend = FALSE) +
geom_line(aes(fill = variable, colour=variable), size= 1, show.legend = FALSE)+
facet_wrap(~ variable, ncol = 2) +
theme(legend.position = "none")+
scale_color_uchicago()+
scale_fill_uchicago()+
theme_hc()
ggplot(p3, aes(Year, value, fill = variable, colour=variable)) +
geom_point(aes(fill = variable, colour=variable), size =1,show.legend = FALSE) +
geom_line(aes(fill = variable, colour=variable), size= 1, show.legend = FALSE)+
facet_wrap(~ variable, ncol = 2) +
theme(legend.position = "none")+
scale_color_lancet()+
scale_fill_lancet()
theme_hc()
ggplot(p4, aes(Year, value, fill = variable, colour=variable)) +
geom_point(aes(fill = variable, colour=variable), size =1,show.legend = FALSE) +
geom_line(aes(fill = variable, colour=variable), size= 1, show.legend = FALSE)+
facet_wrap(~ variable, ncol = 2) +
theme(legend.position = "none")+
scale_color_uchicago()+
scale_fill_uchicago()+
theme_hc()
ggplot(p3, aes(Year, value, fill = variable, colour=variable)) +
geom_point(aes(fill = variable, colour=variable), size =1,show.legend = FALSE) +
geom_line(aes(fill = variable, colour=variable), size= 1, show.legend = FALSE)+
facet_wrap(~ variable, ncol = 2) +
theme(legend.position = "none")+
scale_color_lancet()+
scale_fill_lancet()+
theme_hc()
devtools::check_win_release()
# Downloading the data
library(EpiBibR)
library(bibliometrix)
MM<-EpiBib_references()
# Only fo 2020
M<-EpiBib_year(2020)
# Summary results + plots
results <- biblioAnalysis(MM, sep = ";")
S <- summary(object = results, k = 10, pause = FALSE)
setwd("~/EpiBibR1")
# Most Productive Authors
library(bibliometrix)
library(reshape2)
library(ggplot2)
library(ggsci)
library(tidyverse)
library(plyr)
library(ggthemes)
library(cowplot)
df <- plyr::ldply(S, data.frame)
df <- subset(df, .id == "MostProdAuthors", select = c(Articles, Authors.......))
df <- df %>% dplyr::rename(Authors = Authors.......)
df$Articles <- as.numeric(df$Articles)
df$Authors <-as.factor(df$Authors)
p1 <- ggplot(df, aes(x = reorder(Authors, Articles), y = Articles, fill = Articles)) +
geom_bar(stat="identity") +
coord_flip() +
labs(x = "Authors") +
theme_hc()
rm(df)
# Most Productive Countries
df <- plyr::ldply(S, data.frame)
df <- subset(df, .id == "MostProdCountries", select = c(Articles, Country))
df$Articles <- as.numeric(df$Articles)
df$Country <-as.factor(df$Country)
p2 <- ggplot(df, aes(x = reorder(Country, Articles), y = Articles, fill = Articles)) +
geom_bar(stat="identity") +
coord_flip() +
labs(x = "Countries") +
theme_hc()
rm(df)
# Count of articles per year
df <- plyr::ldply(S, data.frame)
df <- subset(df, .id == "AnnualProduction", select = c(Year..., Articles))
df <- df %>% dplyr::rename(Year = Year...)
df$Year <- as.numeric(as.character(df$Year))
df$Articles <- as.numeric(df$Articles)
p3 <- ggplot(df, aes(x = Year, y = Articles, colour = cond)) +
geom_line(colour = "#0072B2") +
geom_point(colour = "#0072B2") +
labs( x = "") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_continuous(breaks = seq(1950,2020, 5)) +
theme_hc()
rm(df)
ggsave(
".man/figures/figure1.png",
ggdraw() +
draw_plot(p3, 0, .5, 1, .5) +
draw_plot(p1, 0, 0, .5, .5) +
draw_plot(p2, .5, 0, .5, .5) +
draw_plot_label(c("A", "B", "C"), c(0, 0, 0.5), c(1, 0.5, 0.5), size = 15)
,
dpi = 1200
)
ggsave(
"./man/figures/figure1.png",
ggdraw() +
draw_plot(p3, 0, .5, 1, .5) +
draw_plot(p1, 0, 0, .5, .5) +
draw_plot(p2, .5, 0, .5, .5) +
draw_plot_label(c("A", "B", "C"), c(0, 0, 0.5), c(1, 0.5, 0.5), size = 15)
,
dpi = 1200
)
url <- paste0("https://warin.ca/ressources/data/epiBib/EpiBib.Rdata")
path <- file.path(tempdir(), "temp.Rdata")
curl::curl_download(url, path)
#reading the data
rData <- file.path(paste0(tempdir(), "/temp.Rdata"))
load(rData)
EpiBib_references <- function() {
EpiBib_data
}
knitr::opts_chunk$set(echo = TRUE)
aa <-EpiBib_references()
EpiBib_author <- function(author) {
if (missing(author)) {
EpiBib_data
} else {
EpiBib_data[grep(author,  EpiBib_data$AU, ignore.case = TRUE), ]
}
}
Yang <- EpiBib_author("yang")
View(Yang)
EpiBib_country <- function(country) {
if (missing(country)) {
EpiBib_data
} else {
EpiBib_data[grep(country, EpiBib_data$AU_CO, ignore.case = TRUE), ]
}
}
bb <- EpiBib_country("Canada")
bb <- EpiBib_country( country = c("Canada","China")
View(bb)
View(bb)
EpiBib_title <- function(title) {
if (missing(title)) {
EpiBib_data
} else {
EpiBib_data[grep(title, EpiBib_data$TI, ignore.case = TRUE), ]
}
}
cc <- EpiBib_title("Heart")
View(cc)
EpiBib_year <- function(year) {
if (missing(year)) {
EpiBib_data
} else {
EpiBib_data[grep(year, EpiBib_data$PY, ignore.case = TRUE), ]
}
}
df <- EpiBib_year("2017")
df <- EpiBib_year( year = "2017")
EpiBib_source <- function(source) {
if (missing(source)) {
EpiBib_data
} else {
EpiBib_data[grep(source, EpiBib_data$SO, ignore.case = TRUE), ]
}
}
df <- EpiBib_source("bio")
EpiBib_AU_YE <- function(author = NULL, year = NULL) {
if (is.null(author) & is.null(year)) {
EpiBib_data
} else if (is.null(author)) {
EpiBib_data[grep(year, EpiBib_data$PY, ignore.case = TRUE), ]
} else if (is.null(year)) {
EpiBib_data[grep(author, EpiBib_data$AU, ignore.case = TRUE), ]
} else {
with(EpiBib_data, EpiBib_data[grepl(author, AU, ignore.case = TRUE) & grepl(year, PY, ignore.case = TRUE), ])
}
}
df <- EpiBib_AU_YE(author = "yang", year = 2005)
View(df)
library(pkgdown)
deploy_site_github("EpiBibR")
deploy_site_github()
build_site()
setwd("~/EpiBibR")
knitr::include_graphics("./vignettes/figure1.png")
pkgdown::build_site()
pkgdown::build_site()
library(usethis)
use_vignette("Reproducible Material")
use_vignette("reproducibleMaterial")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE, results='asis', fig.align="center", fig.height=7, fig.width=8)
gsub(" ","",paste("~/ds4ib/mondo-en/data/datasets/",tolower(listCountry[1]),gsub("[[:punct:]]","",variable),".csv")
)
gsub(" ","",paste("~/ds4ib/mondo-en/data/datasets/",tolower(listCountry[1]),gsub("[[:punct:]]","","hello"),".csv"))
gsub(" ","",paste("~/ds4ib/mondo-en/data/datasets/",gsub("[[:punct:]]","","hello"),".csv"))
update_dataset <- function(silence = FALSE){
flag <- FALSE
# dans ce qui suit, on va comparer la date du fichier de données du package sur CRAN avec la date du fichier de données du package dans sa version de développement sur Github. On va aller chercher les fichiers de données respectifs:
## d'abord, sur CRAN:
epibibr_cran <- EpiBibR::rData # ici, il faut trouver un moyen de mémoriser la date du fichier de données sur CRAN
## ensuite sur Github:
url <- paste0("https://warin.ca/ressources/data/epiBib/EpiBib.Rdata")
path <- file.path(tempdir(), "temp.Rdata")
curl::curl_download(url, path)
rData <- file.path(paste0(tempdir(), "/temp.Rdata"))
load(rData)
epibibr_github <- utils::load(rData)
## and then removing the temp folder (to be )
unlink(tempdir())
if(!base::identical(epibibr_github, epibibr_cran)){
if(base::nrow(epibibr_github) > base::nrow(epibibr_cran)){
flag <- TRUE
}
}
if(flag){
if(!silence){
q <- base::tolower(base::readline("Updates are available on the EpiBibR development version, do you want to update? n/Y"))
} else {
q <- "y"
}
if(q == "y" | q == "yes"){
base::tryCatch(
expr = {
devtools::install_github("warint/EpiBibR",
upgrade = "never",
ref = "master")
# base::message("The data was refreshed, please restart your session to have the new data available")
# If library is loaded, auto onload and load the library to have the new data available
if ("EpibBibR" %in% names(utils::sessionInfo()$otherPkgs)) {
detach(package:EpiBibR, unload = TRUE)
library(EpiBibR)
}
},
error = function(e){
message('Caught an error!')
print(e)
},
warning = function(w){
message('Caught a warning!')
print(w)
}
)
}
} else {
base::message("No updates are available")
}
# removing the temp folder and creating a data frame
unlink(tempdir())
}
update_dataset()
url <- paste0("https://warin.ca/ressources/data/epiBib/EpiBib.Rdata")
path <- file.path(tempdir(), "temp.Rdata")
curl::curl_download(url, path)
rData <- file.path(paste0(tempdir(), "/temp.Rdata"))
load(rData)
update_dataset()
library(EpiBibR)
epibibr_github <- utils::load(rData)
epibibr_github <- utils::load(rData)
load(rData)
epibibr_github <- utils::load(rData)
## and then removing the temp folder (to be )
unlink(tempdir())
library(EpiBibR)
update_dataset <- function(silence = FALSE){
flag <- FALSE
# dans ce qui suit, on va comparer la date du fichier de données du package sur CRAN avec la date du fichier de données du package dans sa version de développement sur Github. On va aller chercher les fichiers de données respectifs:
## d'abord, sur CRAN:
epibibr_cran <- EpiBibR::rData # ici, il faut trouver un moyen de mémoriser la date du fichier de données sur CRAN
## ensuite sur Github:
url <- paste0("https://warin.ca/ressources/data/epiBib/EpiBib.Rdata")
path <- file.path(tempdir(), "temp.Rdata")
curl::curl_download(url, path)
rData <- file.path(paste0(tempdir(), "/temp.Rdata"))
load(rData)
epibibr_github <- utils::load(rData)
## and then removing the temp folder (to be )
unlink(tempdir())
if(!base::identical(epibibr_github, epibibr_cran)){
if(base::nrow(epibibr_github) > base::nrow(epibibr_cran)){
flag <- TRUE
}
}
if(flag){
if(!silence){
q <- base::tolower(base::readline("Updates are available on the EpiBibR development version, do you want to update? n/Y"))
} else {
q <- "y"
}
if(q == "y" | q == "yes"){
base::tryCatch(
expr = {
devtools::install_github("warint/EpiBibR",
upgrade = "never",
ref = "master")
# base::message("The data was refreshed, please restart your session to have the new data available")
# If library is loaded, auto onload and load the library to have the new data available
if ("EpibBibR" %in% names(utils::sessionInfo()$otherPkgs)) {
detach(package:EpiBibR, unload = TRUE)
library(EpiBibR)
}
},
error = function(e){
message('Caught an error!')
print(e)
},
warning = function(w){
message('Caught a warning!')
print(w)
}
)
}
} else {
base::message("No updates are available")
}
# removing the temp folder and creating a data frame
unlink(tempdir())
}
update_dataset()
library(EpiBibR)
aa <- EpiBib_references()
update_dataset <- function() {
url <- paste0("https://warin.ca/ressources/data/epiBib/EpiBib.Rdata")
path <- file.path(tempdir(), "temp.Rdata")
curl::curl_download(url, path)
#reading the data
rData <- file.path(paste0(tempdir(), "/temp.Rdata"))
load(rData)
}
update_dataset()
knitr::opts_chunk$set(echo = TRUE)
library(EpiBibR)
aa <- EpiBib_references()
aa <- EpiBib_references()
update_dataset <- function() {
url <- paste0("https://warin.ca/ressources/data/epiBib/EpiBib.Rdata")
path <- file.path(tempdir(), "temp.Rdata")
curl::curl_download(url, path)
#reading the data
rData <- file.path(paste0(tempdir(), "/temp.Rdata"))
load(rData)
}
update_dataset()
bb <- EpiBib_references()
update_dataset()
bb <- EpiBib_references()
library(EpiBibR)
aa <- EpiBib_references()
update_dataset()
bb <- EpiBib_references()
remove.packages("EpiBibR")
remove.packages("EpiBibR")
devtools::install_github("warint/EpiBibR")
library(EpiBibR)
aa <- EpiBib_references()
update_dataset()
update_dataset()
bb <- EpiBib_references()
epibib_data <- function(author = "", year = "", country = "", title = "", source = "", abstract = "") {
url <- paste0("https://warin.ca/datalake/epiBib/EpiBib.Rdata")
path <- file.path(tempdir(), "temp.Rdata")
curl::curl_download(url, path)
#reading the data
rData <- file.path(paste0(tempdir(), "/temp.Rdata"))
load(rData)
EpiBib_data[, 1:ncol(EpiBib_data)][is.na(EpiBib_data[, 1:ncol(EpiBib_data)])] <- "NA"
EpiBib_grep <- with(EpiBib_data, EpiBib_data[grepl(author, AU, ignore.case = TRUE) &
grepl(year, PY, ignore.case = TRUE) &
grepl(country, AU_CO, ignore.case = TRUE) &
grepl(source, SO, ignore.case = TRUE) &
grepl(abstract, AB, ignore.case = TRUE), ])
}
knitr::opts_chunk$set(echo = TRUE)
aa <- epibib_data()
colson_articles <- epibib_data(author = "colson")
View(colson_articles)
yang2019 <- epibib_data(author ="Yang", year = "2019")
View(yang2019)
yang2019 <- epibib_data(author ="Yang", year = "2020")
covid_articles <- epibib_data(title = "covid")
View(covid_articles)
covid2020_articles <- epibib_data(title = "covid", year = "2020")
coronavirus_articles <- epibib_data(abstract = "coronavirus")
bio_articles <- epibib_data(source = "bio")
library(pkgdown)
build_site()
url <- paste0("https://warin.ca/datalake/epiBib/EpiBib.Rdata")
path <- file.path(tempdir(), "temp.Rdata")
curl::curl_download(url, path)
#reading the data
rData <- file.path(paste0(tempdir(), "/temp.Rdata"))
load(rData)
EpiBib_references <- function() {
url <- paste0("https://warin.ca/datalake/epiBib/EpiBib.Rdata")
path <- file.path(tempdir(), "temp.Rdata")
curl::curl_download(url, path)
#reading the data
rData <- file.path(paste0(tempdir(), "/temp.Rdata"))
load(rData)
EpiBib_data
.Deprecated(msg = "'EpiBib_references()' will be removed in the next version and replaced by the simpler function 'epibib_data()'. 'epibib_data()' is already available.")
}
aa < EpiBib_references()
aa <- EpiBib_references()
EpiBib_references <- function() {
.Deprecated(msg = "'EpiBib_references()' will be removed in the next version and replaced by the simpler function 'epibib_data()'. 'epibib_data()' is already available.")
url <- paste0("https://warin.ca/datalake/epiBib/EpiBib.Rdata")
path <- file.path(tempdir(), "temp.Rdata")
curl::curl_download(url, path)
#reading the data
rData <- file.path(paste0(tempdir(), "/temp.Rdata"))
load(rData)
EpiBib_data
}
aa <- EpiBib_references()
library(pkgdown)
build_site()
library(pkgdown)
build_site()
devtools::install()
library(devtools)
use_build_ignore("figure1.png")
library(EpiBibR)
library(EpiBibR)
devtools::build()
library(devtools)
use_build_ignore(".figure1.png")
library(EpiBibR)
use_build_ignore(".figure5.png")
use_build_ignore(".figure6.png")
library(EpiBibR)
